language:          cpp

#
# Build Dependencies
#
before_script:
  - |
    if [ "$TRAVIS_OS_NAME" = "linux" ]; then
      sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A145
      sudo apt-get -y install cmake
    fi

  # Test the build workflow slightly differenly from the README.md
  #
  # Let travis clone cryptopp-cmake
  # cd ..
  # git clone https://github.com/weidai11/cryptopp.git
  #
  # Copy cmake files to cryptopp then build
  - |
    cd ..
    git clone https://github.com/weidai11/cryptopp.git
    cp cryptopp-cmake/*.* cryptopp
    cd cryptopp
    mkdir _build
    cd _build

before_install:
  - eval "${MATRIX_EVAL}"
  - ${CXX} --version

matrix:
  include:

  #
  # ARM64
  #
  - os: linux
    arch: arm64
    compiler: gcc
    dist: bionic
    name: ARM64, g++ 7.4.0, cmake 3.10.2
    env:
      - TEST="ARM64, g++ 7.4.0, cmake 3.10.2"
    script:
      - cmake ..
      - make -k -j 2
      - ctest --output-on-failure

  - os: linux
    arch: arm64
    compiler: clang
    dist: bionic
    name: ARM64, clang++ 6.0.0, cmake 3.10.2
    env:
      - TEST="ARM64, clang++ 6.0.0, cmake 3.10.2"
    script:
      - cmake ..
      - make -k -j 2
      - ctest --output-on-failure

  #
  # PPC64
  #
  - os: linux
    arch: ppc64le
    compiler: gcc
    dist: bionic
    name: PPC64, g++ 5.4.0, cmake 3.5.1
    env:
      - TEST="PPC64, g++ 5.4.0s, cmake 3.5.1"
    script:
      - cmake ..
      - make -k -j 2
      - ctest --output-on-failure

  - os: linux
    arch: ppc64le
    compiler: clang
    dist: bionic
    name: PPC64, clang++ 3.8.0, cmake 3.10.2
    env:
      - TEST="PPC64, clang++ 3.8.0, cmake 3.10.2"
    script:
      - cmake ..
      - make -k -j 2
      - ctest --output-on-failure

  #
  # XCode 9.4
  #
  - os: osx
    osx_image: xcode10.1
    name: XCode 10.1, OS X 10.13
    env:
      - TEST="XCode 10.1, OS X 10.13"
    script:
      - cmake ..
      - make -k -j 2
      - ctest --output-on-failure

  #
  # G++ default from Ubuntu Trusty
  #
  - os: linux
    name: Ubuntu Trusty, g++ 4.8.4, cmake 2.8.12
    dist: trusty
    env:
      - TEST="Ubuntu Trusty, g++ 4.8.4, cmake 2.8.12"
      - MATRIX_EVAL="CC=gcc && CXX=g++"

    script:
      - cmake -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" ..
      - make -k -j 2
      - ctest --output-on-failure

  #
  # Clang default from Ubuntu Trusty
  #
  - os: linux
    name: Ubuntu Trusty, clang++ 5.0, cmake 2.8.12
    dist: trusty
    env:
      - TEST="Ubuntu Trusty, clang++ 5.0, cmake 2.8.12"
      - MATRIX_EVAL="CC=clang && CXX=clang++"

    script:
      - cmake -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ ..
      - make -k -j 2
      - ctest --output-on-failure

  #
  # G++ with latest cmake
  #
  - os: linux
    name: Ubuntu Trusty, g++ 4.8.4, cmake 3.11.4
    dist: trusty
    env:
      - TEST="Ubuntu Trusty, g++ 4.8.4, cmake 3.11.4"
      - MATRIX_EVAL="CC=gcc && CXX=g++"

  allow_failures:
    # Clang 7.1 and below will fail on PPC64 due to
    # https://bugs.llvm.org/show_bug.cgi?id=39704
    - os: linux
      arch: ppc64le
      compiler: clang

    before_script:
      #
      # Update / Install CMake
      #
      - |
        if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
          mkdir -p external/cmake
          pushd external/cmake
          wget https://cmake.org/files/v3.11/cmake-3.11.4-Linux-x86_64.sh
          chmod +x cmake-*-Linux-x86_64.sh
          ./cmake-*-Linux-x86_64.sh --exclude-subdir --skip-license
          export PATH="${PWD}/bin:$PATH"
          popd
        else
          brew update
          brew outdated cmake || brew upgrade cmake
        fi

      #
      # Test the build workflow slightly differenly from the README.md
      #
      # Let travis clone cryptopp-cmake
      # cd ..
      # Create a parent test project
      # git clone https://github.com/weidai11/cryptopp.git
      # Copy cmake files to cryptopp then build
      # Create cmake file for the test project on the fly
      # Build test project and cryptopp as a subdirectory
      #
      - |
        cd ..
        mkdir test
        cd test
        git clone https://github.com/weidai11/cryptopp.git
        cp ../cryptopp-cmake/cryptopp-config.cmake cryptopp
        cp ../cryptopp-cmake/CMakeLists.txt cryptopp

      #
      # Call it from a project that requires recent version of cmake
      #
      - |
        echo "cmake_minimum_required(VERSION 3.10)" > CMakeLists.txt
        echo "# This next line is the one that will trigger CMP0048 new behavior" >> CMakeLists.txt
        echo "project(abc VERSION 1.0.0)" >> CMakeLists.txt
        echo "add_subdirectory(cryptopp)" >> CMakeLists.txt

      #
      # Build Folder
      #
      - mkdir _build
      - cd _build

    script:
      - cmake -DCMAKE_C_COMPILER="gcc" -DCMAKE_CXX_COMPILER="g++" ..
      - make -k -j 2
      - ctest --output-on-failure

addons:
  - sonarcloud: false

# Whitelist branches to avoid testing feature branches twice
branches:
  only:
    - master
    - /\/ci$/

notifications:
  email:
    recipients:
      - cryptopp-build@googlegroups.com
    on_success: always # default: change
    on_failure: always # default: always
